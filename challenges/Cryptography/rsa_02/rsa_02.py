# RSA When the Public exponent is too small
from Crypto.Util.number import getPrime,inverse,bytes_to_long,long_to_bytes
from gmpy2 import iroot
# p = getPrime(1024)
# q = getPrime(1024)
# n = p*q
# phi = (p-1)*(q-1)
# e = 3
# d = inverse(e,phi)
# f = open("flag.txt","r").read()
# m = bytes_to_long(f.encode())
# c = pow(m,e,n)
# print(c)
# print(n)


# Solution
c = 310392890450289624946891226622993319046166193407826895529457214435719628609429552976581940105910164743964906302618735753021417268739326208509267167218809192545994077098878848834099601864161076806433975998837154992556775688775162028182721965174816899673492801387584046866055311262109856543687869561941541460873106667865024075939496689964771612240713574687643493394118159822437
n = 20007437250694023071977014779519404169046615039567749720825437958419495833117286008325553215569889643589167715987423580465261166789445762675557589303686187868091683422599395036088572460747452942750714934672062680250311457871780096770302865975250411053530924874839021774761305321310455956154370230794564867036844858541686194686806330632486285667298994316346601247132717893506938679463679782140495398067272664358144333309816582816616612047775627218253413423949586261776519211762241133150476601162303467677045164220131582230586270993867218685559391382170790801630692803805082941869188504315402581869603313706730224559693
# e = 3

# x = iroot(c,3)[0]
# print(long_to_bytes(x))